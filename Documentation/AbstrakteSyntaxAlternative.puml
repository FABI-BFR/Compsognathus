@startuml
'https://plantuml.com/class-diagram

skinparam LineType Ortho
skinparam Ranksep 50
skinparam Nodesep 50
skinparam minClassWidth 150
skinparam minClassHeight 150
skinparam maxClassHeight{
    Expr 100
}



'Class Program
class Program{
-klassen: List<Class>
--
}
Program o-> Class

'Class Class
class Class{
name:String
attribut:List<IField>
methoden: List<IMethod>
access: Access
--
}
Class o-> Method



'Class Field
class Field{
name: String
type: Type
access: Access
--
}
 Field <--o Class

'Class Method
class Method{
name: String
type: Type
parameter: List<IExpr>
statement: IStmt
--
}
Method o-> Parameter
Method -r> IStmt

'Class Parameter
class Parameter{
+name:String
+type:Type
--
}






'Interface Statement
interface IStmt{
}

class While{
+expression:IExpr
+ stmt : IStmt
}
While ---|> IStmt

class Return{
+expression:IExpr
+type:String
--
}
Return ---|> IStmt

class If{
+expression:IExpr
+stmt1:IStmt
+stmt2:IStmt
--
}
If ---|> IStmt

class LocalOrFieldVar{
+type : Type
+name : String
}
LocalOrFieldVar ---|> IStmt



class Block{
+statements: IStmt[]
+type:String
--
}
Block -|> IStmt








'Interface Statement Expression
interface IStmtExpr{
}
IStmtExpr -l|> IStmt
IStmtExpr -l|> IExpr

class MethodCall{
}
IStmtExpr <|-- MethodCall

class Assign{
varName:String
expression:IExpr
}
IStmtExpr <|-- Assign

class New{
}
IStmtExpr <|-- New








'Inteface Expressions
interface IExpr{
    --
}

class StringLit{
+value String
}
StringLit ---|> IExpr
StringLit -[hidden]-> IntegerLit

class IntegerLit{
+value Integer
}
IntegerLit ---|> IExpr
IntegerLit -[hidden]-> BoolLit

class BoolLit{
+value Boolean
}
BoolLit ---|> IExpr
BoolLit -[hidden]-> CharLit

class CharLit{
+value Char
}
CharLit ---|> IExpr
CharLit -[hidden]-> Binary

class Binary{
+operator : String
+expression1 : IExpr
+expression2 : IExpr
}
Binary ---|> IExpr
Binary -[hidden]-> Unary

class Unary{
+operator : String
+expression1 : IExpr
}
Unary --|> IExpr

class LocalOrFieldVar{
}
LocalOrFieldVar --|>  IExpr


class Super{
}
Super --|> IExpr

class This{
}
This --|>IExpr

class JNull{
}
JNull --|>IExpr

class InstVar{
    --
    +varName:String
    +expression:IExpr
    +type: String
}
InstVar --|> IExpr

@enduml