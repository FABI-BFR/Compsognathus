Program: {
Classes: [
	Class: {
	Name: Main
	Access: public
	Fields: [
		Field: {
		Type: int
		Name: i
		Access: public
		}
		Field: {
		Type: java.lang.String
		Name: temp
		Access: public
		}
		Field: {
		Type: int
		Name: i
		Access: private
		}
		Field: {
		Type: int
		Name: b
		Access: private
		}
	]
	Methods: [
		Method: {
		Type: int
		Name: geti
		Access: public
		Parameter: [
		]
		Statement: {
			Block: {
				Return: {
				Expression: 
					LocalOrFieldVar: {
					Name: i
					}
				}
			}
		}
		}
		Method: {
		Type: void
		Name: setStringIf
		Access: public
		Parameter: [
			Parameter: {
			Type: int
			Name: a
			}
			Parameter: {
			Type: int
			Name: b
			}
			Parameter: {
			Type: boolean
			Name: cond
			}
			Parameter: {
			Type: java.lang.String
			Name: temp
			}
		]
		Statement: {
			Block: {
				IfStatement: {
					Binary: {
					Operator: &&
					Leftside: {
						Binary: {
						Operator: ==
						Leftside: {
							LocalOrFieldVar: {
							Name: a
							}
						}
						Rightside: {
							LocalOrFieldVar: {
							Name: b
							}
						}
						}
					}
					Rightside: {
						LocalOrFieldVar: {
						Type:Boolean
						Name: cond
						}
					}
					}
				IfBranch: {
					Block: {
						StmtExpr: { 
							LeftSideExpression: 
								Expression: 
									LocalOrFieldVar: {
									Name: temp
									}
							Expression: 
								LocalOrFieldVar: {
								Name: temp
								}
						}
					}
				}
				ElseBranch: {
					IfStatement: {
						Binary: {
						Operator: >
						Leftside: {
							LocalOrFieldVar: {
							Name: a
							}
						}
						Rightside: {
							LocalOrFieldVar: {
							Name: b
							}
						}
						}
					IfBranch: {
						Block: {
							StmtExpr: { 
								LeftSideExpression: 
									Expression: 
										LocalOrFieldVar: {
										Name: temp
										}
								Expression: 
									Unary: {
									Operator: 
									Expression: 
										StringLit: {
										Type: String
										Value: "fisch"
										}
									}
							}
						}
					}
					ElseBranch: {
						Block: {
							StmtExpr: { 
								LeftSideExpression: 
									Expression: 
										LocalOrFieldVar: {
										Name: temp
										}
								Expression: 
									Unary: {
									Operator: 
									Expression: 
										StringLit: {
										Type: String
										Value: "kein fisch"
										}
									}
							}
						}
					}
					}
				}
				}
			}
		}
		}
		Method: {
		Type: void
		Name: doABackflip
		Access: public
		Parameter: [
		]
		Statement: {
			Block: {
				StmtExpr: { 
					MethodCall: {
					Name: setStringIf
					Objekt: 
						This: {}
					Parameters: [
						Unary: {
						Operator: 
						Expression: 
							IntegerLit: {
							Type: Integer
							Value: 1
							}
						}
						Unary: {
						Operator: 
						Expression: 
							IntegerLit: {
							Type: Integer
							Value: 1
							}
						}
						Unary: {
						Operator: 
						Expression: 
							BoolLit: {
							Type: Boolean
							Value: true
							}
						}
						Unary: {
						Operator: 
						Expression: 
							StringLit: {
							Type: String
							Value: "fischomat"
							}
						}
					]
					}
				}
				LocalOrFieldVar: {
				Type:int
				Name: f
				}
				StmtExpr: { 
					LeftSideExpression: 
						Expression: 
							LocalOrFieldVar: {
							Name: f
							}
					Expression: 
						MethodCall: {
						Name: geti
						Objekt: 
							This: {}
						Parameters: [
						]
						}
				}
				While: { 
				Expression: 
					Binary: {
					Operator: <=
					Leftside: {
						LocalOrFieldVar: {
						Name: f
						}
					}
					Rightside: {
						Unary: {
						Operator: 
						Expression: 
							IntegerLit: {
							Type: Integer
							Value: 10
							}
						}
					}
					}
				Statement: 
					Block: {
						StmtExpr: { 
							Binary: {
							Operator: +
							Leftside: {
								IntegerLit: {
								Type: Integer
								Value: 1
								}
							}
							Rightside: {
								LocalOrFieldVar: {
								Type:int
								Name: f
								}
							}
							}
						}
					}
				}
			}
		}
		}
	]
	Constructors: [
		Constructor: {
		Name: Main
		Access: public
		Parameter: [
		]
		Statement: 
			Block: {
				StmtExpr: { 
					LeftSideExpression: 
						Expression: 
							LocalOrFieldVar: {
							Name: i
							}
					Expression: 
						Unary: {
						Operator: 
						Expression: 
							IntegerLit: {
							Type: Integer
							Value: 0
							}
						}
				}
				StmtExpr: { 
					LeftSideExpression: 
						Expression: 
							LocalOrFieldVar: {
							Name: temp
							}
					Expression: 
						Unary: {
						Operator: 
						Expression: 
							StringLit: {
							Type: String
							Value: "null"
							}
						}
				}
				LocalOrFieldVar: {
				Type:int
				Name: c
				}
			}
		}
		Constructor: {
		Name: Main
		Access: public
		Parameter: [
			Parameter: {
			Type: int
			Name: i
			}
			Parameter: {
			Type: java.lang.String
			Name: temp
			}
		]
		Statement: 
			Block: {
				StmtExpr: { 
					LeftSideExpression: 
						Expression: 
							LocalOrFieldVar: {
							Name: i
							}
					Expression: 
						LocalOrFieldVar: {
						Name: i
						}
				}
				StmtExpr: { 
					LeftSideExpression: 
						Expression: 
							LocalOrFieldVar: {
							Name: temp
							}
					Expression: 
						LocalOrFieldVar: {
						Name: temp
						}
				}
				LocalOrFieldVar: {
				Type:int
				Name: a
				}
				LocalOrFieldVar: {
				Type:int
				Name: b
				}
				LocalOrFieldVar: {
				Type:int
				Name: c
				}
			}
		}
	]
	}
]
}
